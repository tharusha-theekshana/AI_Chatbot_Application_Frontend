name: AI Chatbot Frontend Build & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code in repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.0'

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          npm install

      # Step 4: Run tests and linters
      # Linters catch syntax errors and code quality errors.
      - name: Run Tests and Linters
        run: |
          npm run lint
          npm test

      # Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 6: Log into DockerHub
      - name: Log into DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS_KEY }}

      # Step 7: Build the Docker image and push to DockerHub
      - name: Build and Push Docker Image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: tharushatheekshana/ai-chatbot-frontend:latest

      # Step 8: Log in to AWS ECR
#      - name: Log into AWS ECR
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          region: ${{ secrets.AWS_REGION }}

      # Step 9: Tag Docker image for ECR
#      - name: Tag Docker image for ECR
#        run: |
#          docker tag tharushatheekshana/ai-chatbot-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ai-chatbot-frontend:latest

      # Step 10: Push the Docker image to AWS ECR
#      - name: Push Docker image to AWS ECR
#        run: |
#          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ai-chatbot-frontend:latest

      # Step 11: Update ECS Service with the new Docker image (Deployment)
#      - name: Deploy to AWS ECS
#        uses: aws-actions/amazon-ecs-deploy-action@v1
#        with:
#          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
#          service: ${{ secrets.ECS_SERVICE_NAME }}
#          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ai-chatbot-frontend:latest

      # Step 12: Post Build Status
      - name: Post Build Status
        run: echo "Image built and pushed to DockerHub and ECR. ECS Service updated successfully!"
